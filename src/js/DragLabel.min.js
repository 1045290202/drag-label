Array.prototype.indexOf=function(val){for(let i=0;i<this.length;i++){if(this[i]===val)return i}return-1};Array.prototype.remove=function(val){let index=this.indexOf(val);if(index>-1){this.splice(index,1)}};class DragLabel{constructor(dragViewId,draggedViewId,{deletable:deletable=true,regExps:regExps=[/\s/g],writable:writable=false,maxLength:maxLength=-1}={}){this.dragViewId=dragViewId;this.draggedViewId=draggedViewId;this.options={deletable:deletable,regExps:regExps,writable:writable,maxLength:maxLength};this.labels=[];this.nodes=[];this.iNodes=[];this.inputNodes=[]}addDragListener({overstep:overstep=null,empty:empty=null,success:success=null}={},callback=((tip,text)=>{})){document.addEventListener("dragstart",e=>{let element=e.target;e.dataTransfer.setData("class",element.parentNode.className);let parentNodes=getParentNodes(element);let isDraggedView=parentNodes.some((value,index,array)=>{return value.id===this.draggedViewId});e.dataTransfer.setData("isDraggedView",isDraggedView.toString())});document.addEventListener("dragover",e=>{e.preventDefault()});document.addEventListener("drop",e=>{e.stopPropagation();e.preventDefault();let element=e.target;let text=e.dataTransfer.getData("text");this.options.regExps.forEach((value,index,array)=>{text=text.replace(value,"")});if(this.options.maxLength>=0&&text.length>this.options.maxLength){callback(overstep,text);return}else if(text.length===0){callback(empty,text);return}let node=document.createElement("span");node.className=DragLabel.spanClass;let spanNode=document.createElement("span");spanNode.innerText=text;spanNode.className=DragLabel.inputClass;if(this.options.writable){spanNode.contentEditable="true"}else{spanNode.contentEditable="false"}node.appendChild(spanNode);let iNode=document.createElement("i");iNode.onclick=(()=>{node.remove();this.nodes.remove(node);this.iNodes.remove(iNode)});if(this.options.deletable){iNode.classList.remove(DragLabel.hiddenClass)}else{iNode.classList.add(DragLabel.hiddenClass)}iNode.className=DragLabel.iClass;iNode.setAttribute("aria-hidden","true");this.iNodes.push(iNode);node.appendChild(iNode);if(e.dataTransfer.getData("isDraggedView")==="false"){return}if(element.id===this.dragViewId&&e.dataTransfer.getData("class")!==DragLabel.spanClass){element.appendChild(node);this.labels.push(text);this.nodes.push(node)}else if(element.parentNode.className===DragLabel.spanClass){element.parentNode.parentNode.appendChild(node);this.labels.push(text);this.nodes.push(node)}else if(element.className===DragLabel.spanClass){element.parentNode.appendChild(node);this.labels.push(text);this.nodes.push(node)}callback(success,text)})}setNodesDeletable(deletable){this.options.deletable=deletable;this.iNodes.forEach((value,index,array)=>{let iNode=value;if(deletable){iNode.classList.remove(DragLabel.hiddenClass)}else{iNode.classList.add(DragLabel.hiddenClass)}})}setNodesWritable(writable){this.options.writable=writable;this.inputNodes.forEach((value,index,array)=>{let inputNode=value;if(writable){inputNode.contentEditable="true"}else{inputNode.contentEditable="false"}})}}DragLabel.spanClass="spanClass";DragLabel.hiddenClass="hiddenClass";DragLabel.inputClass="inputClass";DragLabel.iClass="iClass";[{name:DragLabel.spanClass,data:"drag-label",configurable:false,writable:false},{name:DragLabel.inputClass,data:"drag-input",configurable:false,writable:false},{name:DragLabel.hiddenClass,data:"drag-hidden",configurable:false,writable:false},{name:DragLabel.iClass,data:"fa fa-times drag-remove",configurable:false,writable:false}].forEach(function(value,index,array){Object.defineProperty(DragLabel,value.name,{configurable:value.configurable,writable:value.writable,value:value.data})});let getParentNodes=function f(startTag,parentList=[]){if(startTag.parentElement.nodeName!=="BODY"){parentList.push(startTag.parentElement);return f(startTag.parentElement,parentList)}else{return parentList}};